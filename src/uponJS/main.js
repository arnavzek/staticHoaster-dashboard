import imageCompression from "browser-image-compression";

class uponJS {
  constructor(configuration) {
    this.info = {}; //to do differentiation

    this.configuration = {
      fees: {},
    };
    Object.assign(this.configuration, configuration ? configuration : {});
    this.files = {};

    this.currentPrompt = {};

    this.borderRadius = "5px";

    this.request_callbacks = {};
    this.listen_callbacks = {};
    this.socket = {};
    this.socketData = { query: [], room: [] };

    this.utility = this.utilityFunctions();
    this.query = this.query.bind(this);

    this.socketFunctions = { query: {}, room: {} };

    this.receivingStatus = false;
    this.loginCallback = null;

    this.loadingSVG = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: transparent; display: block; shape-rendering: auto;" width="100px" height="100px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
    <g transform="rotate(0 50 50)">
      <rect x="32" y="29.5" rx="18" ry="0.5" width="36" height="1" fill="#0a0a0a">
        <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.6666666666666666s" repeatCount="indefinite"/>
      </rect>
    </g><g transform="rotate(120 50 50)">
      <rect x="32" y="29.5" rx="18" ry="0.5" width="36" height="1" fill="#0a0a0a">
        <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="-0.3333333333333333s" repeatCount="indefinite"/>
      </rect>
    </g><g transform="rotate(240 50 50)">
      <rect x="32" y="29.5" rx="18" ry="0.5" width="36" height="1" fill="#0a0a0a">
        <animate attributeName="opacity" values="1;0" keyTimes="0;1" dur="1s" begin="0s" repeatCount="indefinite"/>
      </rect>
    </g>
    <!-- [ldio] generated by https://loading.io/ --></svg>`;
    // this.declareComponents = this.declareComponents.bind(this)

    // window.addEventListener('load',this.declareComponents)

    //----------------------Set cookie from url param----------------------------------------

    if (this.urlParam("cookie")) {
      let cookie = this.urlParam("cookie");
      let devLogin = this.urlParam("devLogin");

      devLogin !== "false"
        ? localStorage.setItem("developer-cookie-localstorage", cookie)
        : (document.cookie = `user-cookie=${cookie}; expires=Sun, 1 Jan 2023 00:00:00 UTC; path=/`);
    }

    this.info.host = "upon.one";
    this.info.port = 80;

    if (!this.configuration.name)
      if (document.querySelector("title")) {
        this.configuration.name = document
          .querySelector("title")
          .innerHTML.split(" ")[0]
          .toLowerCase();
      }

    if (!global.uponJS_instance) {
      global.uponJS_instance = {};
    }

    if (this.configuration.name)
      global.uponJS_instance[this.configuration.name] = this;

    if (
      window.location.origin.indexOf("upon.one") !== -1 ||
      window.location.origin.indexOf("localhost.com") !== -1
    ) {
      this.configuration.job = "receive";
    }

    this.updateServerLink();

    if (this.configuration.job !== "receive") {
      this.configuration.job = "host";
    }
  }

  runCloudFunction = (functionName, arg) => {
    return this.query({ $run: [functionName, arg] });
  };
  collection = (collectionName) => {
    let U = this;
    return new (class {
      constructor() {
        this.collectionName = collectionName;
        this.find = this.find.bind(this);
        this.search = this.search.bind(this);
        this.update = this.update.bind(this);
        this.delete = this.delete.bind(this);
        this.getQuery = this.getQuery.bind(this);
      }

      getQuery(where, put, aditionalQuery) {
        if (!aditionalQuery) aditionalQuery = {};
        return Object.assign(
          { on: this.collectionName, where: where, put: put },
          aditionalQuery
        );
      }

      find(where, aditionalQuery) {
        return U.query({ $find: this.getQuery(where, null, aditionalQuery) });
      }

      search(where, aditionalQuery) {
        return U.query({ $search: this.getQuery(where, null, aditionalQuery) });
      }

      count(where, aditionalQuery) {
        return U.query({ $count: this.getQuery(where, null, aditionalQuery) });
      }

      delete(where, aditionalQuery) {
        return U.query({ $delete: this.getQuery(where) });
      }

      update(where, put, aditionalQuery) {
        return U.query({ $update: this.getQuery(where, put) });
      }

      write(put, aditionalQuery) {
        return U.query({ $write: this.getQuery(null, put) });
      }
    })();
  };
  settings = (configuration) => {
    Object.assign(this.configuration, configuration ? configuration : {}); //transfer all variables of arg 1 into this.configuration
    this.configuration.name = this.configuration.name.toLowerCase();

    global.uponJS_instance[this.configuration.name] = this;

    if (configuration.beta) {
      document.querySelector(
        "#uponJsButton"
      ).innerHTML += `<button style="${U.hostButtonStyle}" onclick="U.loadStylinator()"> 🎨 </button>`;
    }

    this.updateServerLink();
  };
  updateServerLink = () => {
    let protocol = "https";

    if (
      window.location.host.indexOf("localhost.com:8080") !== -1 ||
      this.configuration.local === true
    ) {
      this.info.host = "localhost.com";
      this.info.port = 8080;
      protocol = "http";
    }

    let portString = this.info.port === 80 ? "" : ":" + this.info.port;

    this.info.serverUrl =
      `${protocol}://${this.configuration.name}.` + this.info.host + portString;
  };

  addCron(when, code) {
    if (!this.configuration.cron[when])
      throw Error("when parameter " + when + " is invalid");

    this.configuration.cron[when].push(code);
  }
  changeProfilePicture = (type) => {
    return new Promise(resolve => {
      if (!type) type = "user";

      let inputFileElement = document.createElement("input");
      inputFileElement.setAttribute("type", "file");
      inputFileElement.addEventListener("change", setProfilePicture);
      let prompt;

      function giveImage(user) {
        return `<img style="      
        background: #ffffff;
        border-radius: 500px;
        height: 150px;
        width: 150px;
        margin-top: 30px;
        object-fit: cover;
        box-shadow: 5px 5px 20px #999;
        padding: 0;" src="${U.getProfilePicture(user.id)}">`;
      }

      prompt = U.ask([
        {
          h3: "Change Profile Picture",
          p: {
            id: "imageContainer",
            innerHTML: U.loadingSVG,
            style: "display:flex; justify-content:center; align-items:center;",
          },
        },
        { button: { innerHTML: "Change", onclick: chooseProfilePicture } },
        {
          button: {
            innerHTML: "✓",
            onclick: () => {
              prompt.kill();
              resolve();
            },
          },
        },
      ]);

      U.query("$" + type).then((user) => {
        if (!user) return U.ask([{ h1: "You need to login First" }]);
        prompt.dom.querySelector("#imageContainer").innerHTML = giveImage(user);
      });

      async function setProfilePicture(event) {
        let loading = U.loading("Uploading Profile");
        let file = event.target.files[0];
        let options = {
          maxSizeMB: 1,
          maxWidthOrHeight: 200,
          useWebWorker: true,
          fileType: "jpg",
        };

        let newFile = await imageCompression(file, options);
        await U.utility.upload(newFile, "profilePicture", null, {
          profilePictureOf: type,
        });
        loading.kill();
        U.changeProfilePicture(type).then(resolve);
      }

      function chooseProfilePicture() {
        inputFileElement.click();
      }
    });
  };
  compressImage(file, options) {
    return imageCompression(file, options);
  }
  getCookie(a) {
    var b = document.cookie.match("(^|;)\\s*" + a + "\\s*=\\s*([^;]+)");
    return b ? b.pop() : "";
  }

  openDocumentation = () => {
    let loading = this.loading();
    this.query({ $giveDocumentation: "" }).then((data) => {
      loading.kill();
      let returnData = [{ h1: "Documentation" }];
      for (let key in data) {
        if (key.trim() === "upon.one") continue;
        if (key.trim() === "What is upon.one?") continue;
        returnData.push({
          h3: {
            style: `     
            background: #ffffff00;
            padding: 10px 30px;
            border-radius: 10px;
            font-weight: 400;
            cursor: pointer;
            width: auto;
            color: #000000de;
            font-size: 18px;
            /* width: 100%; */
            /* box-shadow: 2px 3px 8px #999999f2; */
            margin-bottom: 20px;
            box-sizing: border-box;
            text-decoration: underline;`,
            innerHTML: key,
            onclick: () => {
              this.ask([
                { h3: key },
                {
                  p: {
                    style: "    white-space: pre-wrap;",
                    innerHTML: data[key]
                      .replace("<script>", "&lt;script&gt;")
                      .replace("</script>", "&lt;/script&gt;"),
                  },
                },
              ]);
            },
          },
        });
      }
      console.log(returnData);
      this.ask(returnData);
    });
  };
  async query(query, adminMode) {
    if (!adminMode) adminMode = false;

    let apiData = await U.post({
      adminMode: adminMode,
      data: query,
      type: "db",
      cookie: localStorage.getItem("user-cookie-localstorage"),
    });

    if (apiData.data) if (apiData.data.error) throw Error(apiData.data.error);

    return apiData.data; //to document the first arg is data and the other is meta

    //on login error tell user to login and call the same function
  }
  post = (dataTobeSent, callback) => {
    dataTobeSent.cookie = this.getUserCookie();
    dataTobeSent.developerCookie = this.getUserCookie("developer");

    let url = "";
    for (let value in dataTobeSent) {
      if (!dataTobeSent[value]) continue;
      var dataString =
        value +
        "=" +
        (typeof dataTobeSent[value] === "object"
          ? encodeURIComponent(JSON.stringify(dataTobeSent[value]))
          : dataTobeSent[value]);
      url === "" ? (url += dataString) : (url += "&" + dataString);
    }

    // console.log(url,dataTobeSent)
    let headerParam = {
      "Content-type": "application/x-www-form-urlencoded; charset=UTF-8",
    };

    //in hosting environment localstorage is used because we can only set cookies when client and server url are same
    if (this.configuration.job !== "host")
      headerParam.credentials = "same-origin";

    fetch(this.info.serverUrl, {
      method: "POST",
      headers: headerParam,
      body: url,
    }).then((response) => {
      response.json().then((postData) => {
        callback(postData);
      });

      // .catch((er)=>{
      //   console.log(er,response)
      // }) removed because it was catching all the uncaught error
    });

    if (!callback) {
      return new Promise((resolve) => {
        callback = resolve;
      });
    }
  };
  getLogoLink = (link, appName) => {
    if (!link) return "";
    if (link.indexOf("http") !== -1) return link;
    link = link.replace("./", "").replace("../", "");
    if (link.substr(0, 1) == "/") link = link.slice(1, link.length);
    return this.getSubAppUrl(appName) + "/" + link;
  };
  loadStylinator(componentName) {
    return (document.body.innerHTML += "<stylinator-bar> </stylinator-bar>");
  }

  print(data) {
    console.log(
      "%c" + data,
      `color: Green; background-color: LightGreen; padding: 2px 5px; border-radius: ${U.borderRadius};`
    ); //type of print: error, warning, greeting
  }
  random() {
    return (
      Math.random().toString(36).substring(2, 15) +
      Math.random().toString(36).substring(2, 15)
    );
  }

  deleteCookie(name) {
    document.cookie =
      name + "=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;";
  }
  logout(type, reload) {
    if (!type) type = "user";
    U.say("Logging you out..");
    localStorage.removeItem(type);
    localStorage.removeItem(type + "-cookie-localstorage");
    U.deleteCookie(type + "-cookie");
    if (type == "user") {
      return (window.location.href =
        U.getSubAppUrl("auth") + `/?logout=${window.location.origin}`);
    }
    if (reload) window.location.reload();
  }
  search = (query, type) => {
    return new Promise((resolve) => {
      this.post(
        { type: "search", data: { query: query, type: type } },
        (data) => {
          resolve(data);
        }
      );
    });
  };
  changePassword = (msg) => {
    return new Promise((resolve) => {
      function changePassword(event, cred) {
        let processingRequest = this.say("just a second");
        this.post(
          {
            type: "verify_email_access",

            data: {
              username: cred.username,
              newPassword: cred.newPassword.trim(),
              job: "forgot_password",
              verificationCode: cred.verificationCode,
            },
          },
          (data) => {
            if (data.error) return processingRequest.update(data.error);
            processingRequest.kill();
            if (data.code === 200) {
              if (!data.msg) throw Error("username not found");

              //in hosting environment localstorage is used because we can only set cookies when client and server url are same

              loginPrompt.kill(); //to do rename login prompt
              resolve(data);
            }
          }
        );
      }

      let elements = [
        { h1: "check your email for verification code" },
        { h3: msg },
        { input: { name: "username" } },
        { input: { name: "verificationCode", type: "password" } },
        { input: { name: "newPassword", type: "password" } },
        { button: { innerHTML: "Change password", onclick: changePassword } },
      ];
      //not to do notify user update
      let loginPrompt = this.ask(elements);
    }); //benifit of different prompts? reusable
  };
  runCronManually = async (type) => {
    let cronLog = await this.post({ type: "runCRON", data: { type: type } });

    return cronLog;
  };
  getUser = (type) => {
    return new Promise((resolve) => {
      if (!type) type = "user";
      if (!this.getUserCookie(type)) return resolve();

      if (localStorage.getItem(type)) {
        let whole = JSON.parse(localStorage.getItem(type));
        return resolve(whole);
      } else {
        this.query("$" + type).then(function (whole) {
          if (!whole) {
            console.warn(" cookie invalid");
            return resolve();
          }

          if (whole.error) throw whole.error; //we dont send data

          localStorage.setItem(type, JSON.stringify(whole));

          return resolve(whole);
        });
      }
    });
  };
  fromPhone() {
    let width = window.innerWidth > 0 ? window.innerWidth : window.screen.width;
    if (width < 500) return true;
    return false;
  }
  setMetaTag(findBY, attributeToAssign) {
    let key = Object.keys(findBY)[0];
    let metaTag = document.querySelector(`meta[${key}="${findBY[key]}"]`);
    if (metaTag) {
      for (let key in attributeToAssign) {
        metaTag.setAttribute(key, attributeToAssign[key]);
      }
    } else {
      metaTag = document.createElement("meta");

      let attributes = Object.assign(findBY, attributeToAssign);
      for (let key in attributes) {
        metaTag.setAttribute(key, attributes[key]);
      }

      document.head.appendChild(metaTag);
    }
  }
  getSubAppUrl = (app) => {
    return `http://${app}.${this.info.host}:${this.info.port}`;
  };
  login = (loginFor) => {
    return new Promise((finished) => {
      function resolve(data) {
        prompt.kill();
        finished(data);
      }

      let devLogin = false;

      let title = "Login to continue";
      if (loginFor === "developer") {
        title = "👨‍💻 Developer Login";
        devLogin = true;
      }

      //redirect procedure is followed when a it is not dev login job is in production and app is not auth

      let prompt = this.ask([
        { h3: title },
        {
          p: "It will be used to identify author of the app",
        },
        {
          button: {
            onclick: () => {
              console.log("login prompt");
              this.loginWithUponDotOne(devLogin).then(resolve);
            },
            innerHTML: `<img src="${
              this.getSubAppUrl("lib") + "/media/favicon.png"
            }"> upon.one`,
          },
        },
        {
          button: {
            onclick: () => {
              this.loginWithGoogle(devLogin).then(resolve);
            },
            innerHTML: `<img src="${
              this.getSubAppUrl("lib") + "/media/google.png"
            }"> Google`,
          },
        },
      ]);
    });
  };
  loginWithGoogle = (devLogin) => {
    return new Promise((loginCompleted) => {
      if (window.location.protocol === "file:")
        return this.say(
          "Login With Google is not available with file protocol"
        );

      this.say("please Wait");
      const clientId =
        "140572074409-ijht2s8v0ldnotak190gbqi4gh8ci72e.apps.googleusercontent.com";
      const redirectUri = this.getSubAppUrl("auth");
      const responseType = "code";
      const scope = "profile email openid";
      const state = JSON.stringify({
        appName: this.configuration.name,
        devLogin: devLogin,
        redirect: window.location.origin,
        redirectUri: redirectUri,
      });

      window.location = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${clientId}&state=${state}&redirect_uri=${redirectUri}&scope=${scope}&response_type=${responseType}&access_type=offline&include_granted_scopes=true`;

      return;
    });
  };
  processLoginResolve = (data, devLogin, newSignUp) => {
    if (!data) return;
    if (!data.msg) return;

    let redirectJob = () => {
      if (
        this.configuration.name === "auth" &&
        this.configuration.job !== "host"
      )
        return window.location.reload(); //this is in production
    };
    //check if it is a new sign up or old sign up

    if (!devLogin) {
      localStorage.setItem("user-cookie-localstorage", data.msg);
    }
    if (devLogin)
      localStorage.setItem("developer-cookie-localstorage", data.msg);

    if (newSignUp) {
      let type = "user";
      if (devLogin) type = "developer";
      this.changeProfilePicture(type).then(redirectJob);
    } else {
      redirectJob();
    }

    //in hosting environment localstorage is used because we can only set cookies when client and server url are same otherwise cookies are used
  };
  loginWithUponDotOne = (devLogin) => {
    return new Promise((loginCompleted) => {
      let processLogin = (event, cred) => {
        let saying = this.say("just a second " + this.caps(cred.username));

        this.post(
          {
            type: "loginOrSignup",
            data: {
              devLogin: devLogin,
              newAccount: false,
              username: cred.username.toLowerCase(),
              password: cred.password,
            },
          },
          (data) => {
            saying.kill();

            if (data.error) {
              if (data.error === "account not verified")
                return this.verifyEmail(cred.username, devLogin).then(resolve);
            }

            if (data.code === 200) {
              loginPrompt.kill();
              resolve(data);
            } else {
              this.say(data.error);
            }
          }
        );
      };

      let resolve = (data) => {
        this.processLoginResolve(data, devLogin, newSignUp);
        loginCompleted();
      };
      let forgotPassword = () => {
        this.forgotPassword(devLogin).then(resolve);
      };

      let signUp = () => {
        newSignUp = true;
        this.signUp(devLogin).then(resolve);
      };

      let newSignUp = false;
      //only users in production mode is redirected who are not on auth page
      if (!devLogin)
        if (
          this.configuration.job !== "host" &&
          this.configuration.name !== "auth"
        )
          return (window.location.href =
            this.getSubAppUrl("auth") + `/?appName=${this.configuration.name}`);

      //ready state interactive: images are loading
      //complete: all loaded
      //loading: meaning loading

      this.loginResolve = resolve;

      let elements = [
        { h2: "Login" },
        { input: { name: "username", required: true } },
        {
          input: {
            name: "password",
            required: true,
            onEnter: processLogin,
            type: "password",
          },
        },
        { button: { innerHTML: "Login", onclick: processLogin } },
        { button: { innerHTML: "Sign up", onclick: signUp } },
        {
          button: { innerHTML: "Forgotten password", onclick: forgotPassword },
        },
      ];

      let loginPrompt = this.ask(elements);
      console.log();
    });
  };
  signUp(devLogin) {
    return new Promise((resolve) => {
      function signUp(event, cred) {
        let signingup = U.say(" just a second...");

        if (cred.username) cred.username = cred.username.toLowerCase();

        let configData = Object.assign(cred, {
          devLogin: devLogin,
          newAccount: true,
        });

        U.post({ type: "loginOrSignup", data: configData }, (data) => {
          signingup.kill();
          //if the password was wrong handled

          if (data.error) return U.say(data.error);

          proceedToVerifyEmail();

          function proceedToVerifyEmail() {
            signUpPrompt.kill();
            U.verifyEmail(data.username, devLogin).then(resolve);
          }
        });
      }

      //to do make the maximum limit
      //###
      //placeholder for div
      //not to do notify user update
      //to do placeholder

      let elements = [
        { h3: "Sign Up" },
        { p: "It will just take a minute." },
        { input: { name: "name", placeholder: "Full name", required: true } },
        { input: { name: "username", required: true } },
        { input: { name: "password", required: true, type: "password" } },
        { input: { name: "email", required: true } },
        { button: { onclick: signUp, innerHTML: "Sign up" } },
      ];

      let signUpPrompt = U.ask(elements);
    });
  }
  forgotPassword(devLogin) {
    return new Promise((resolve) => {
      function sendVerificationCode(event, cred) {
        let notifySending = U.say("just a second");
        U.post(
          {
            type: "forgot_password",
            data: { devLogin: devLogin, emailOrusername: cred.username },
          },
          (data) => {
            notifySending.kill();
            if (data.error) return U.say(data.error);
            forgotPasswordPrompt.kill();
            U.changePassword(data.msg).then((resetSuccessful) => {
              resolve(resetSuccessful);
            });
          }
        );
      }

      let elements = [
        { h2: "Your username or email" },
        { input: { name: "username", placeholder: "username or email" } },
        {
          button: {
            innerHTML: "Send verification code",
            onclick: sendVerificationCode,
          },
        },
      ];

      let forgotPasswordPrompt = U.ask(elements);
    });
  }
  verifyEmail = (username, devLogin) => {
    //not mandatory, will happen afterwards, email verified as a variable as well

    return new Promise((resolve) => {
      let verify_email = (event, cred) => {
        this.post(
          {
            type: "verify_email_access",
            data: {
              devLogin: devLogin,
              username: username,
              job: "verify_email",
              verificationCode: cred.code.trim(),
            },
          },
          (data) => {
            if (data.error) return this.say(data.error);
            if (data.code === 200) {
              verifyPrompt.kill();

              resolve(data);
            }
          }
        );
      };

      let elements = [
        { h3: "Hi " + username + " check your email for verification code" },
        { input: { type: "password", name: "code" } },
        { button: { onclick: verify_email, innerHTML: "Verify email" } },
      ];

      //not to do notify user update
      let verifyPrompt = this.ask(elements);
    }); //benifit of different prompts? reusable

    //to do only from hompage
  };
  sendVerificationEmail = (email, msg) => {
    return new Promise((resolve) => {
      this.post({ type: "sendVerificationEmail", email: email }, resolve);
    });
  };
  say = (message, onCancel) => {
    return this.ask([{ h3: message }], "say");
  };
  removeDom(dom) {
    if (!dom.parentNode) return;
    dom.parentNode.removeChild(dom);
  }
  CDN = (path) => {
    return `${this.info.serverUrl}/cdn/${path}`;
  };

  getProfilePicture = (userId) => {
    if (!userId) {
      userId = "user";
    }
    return (
      this.getSubAppUrl("www") +
      "/profilePicture/" +
      userId +
      ".jpg?disableChache=" +
      this.random()
    );
  };

  loading = (message) => {
    if (!message) message = "Loading..";
    return this.ask([{ h3: message }, { p: this.loadingSVG }]);
  };
  ask = (elementsNotUnlined, type) => {
    //title with varying weight
    if (!type) type = "ask";
    let overlayContainerName = "#overlayUI" + type;
    //to remember if two source are trying to do something that will require login, two event listener will be set to the input box
    if (document.querySelector(overlayContainerName)) {
      document
        .querySelector(overlayContainerName)
        .parentNode.removeChild(document.querySelector(overlayContainerName));
    }

    let elements = elementsNotUnlined.map((item) => {
      return item;
    });

    class promptUI extends HTMLElement {
      constructor() {
        super();
        this.attachShadow({ mode: "open" });

        let html = `

            <style>

                  .container {
                    display: block;
                    position: relative;
                    padding-left: 35px;
                    margin-bottom: 12px;
                    cursor: pointer;
                    font-size: 22px;
                    -webkit-user-select: none;
                    -moz-user-select: none;
                    font-family: sans-serif;
                    color: #787878;
                    -ms-user-select: none;
                    user-select: none;
                    margin: 60px;
                    margin-bottom: 20px;
                  }
                  
                  /* Hide the browser's default radio button */
                  .container input {
                    position: absolute;
                    opacity: 0;
                    cursor: pointer;
                  }
                  
                  /* Create a custom radio button */
                  .checkmark {
                    position: absolute;
                    top: 0;
                    left: 0;
                    height: 24px;
                    width: 24px;
                  
                    background-color: #eee;
                    border-radius: 500px;
                  }
                  
                  /* On mouse-over, add a grey background color */
                  .container:hover input ~ .checkmark {
                    background-color: #ccc;
                  }
                  
                  /* When the radio button is checked, add a blue background */
                  .container input:checked ~ .checkmark {
                    background-color: #333;
                  }
                  
                  /* Create the indicator (the dot/circle - hidden when not checked) */
                  .checkmark:after {
                    content: "";
                    position: absolute;
                    display: none;
                  }
                  
                  /* Show the indicator (dot/circle) when checked */
                  .container input:checked ~ .checkmark:after {
                    display: block;
                  }
                  
                  /* Style the indicator (dot/circle) */
                  .container .checkmark:after {
                    top: 8px;
                    left: 8px;
                    width: 8px;
                    height: 8px;
                    border-radius: 50%;
                    background: white;
                  }


                  

                  label[data-type=date] {
                    margin-top: 60px;
                    display: inline-block;
                 
                    color: #999;
                    font-family: sans-serif;
                    font-size: 40px;
                  }


              .promptUi {
                background: transparent;
                padding: 4vh 31%;
                padding-top: 5vh;
                color: #000;
              
                position: fixed;
                overflow-y: scroll;
                border: none;
                z-index: 8000000;
                font-family: roboto;
                top: 0;
                left: 0;
                margin: 0;
                width: 100vw;
                border-radius: 0;
                box-sizing: border-box;
                height: 100vh;
              }

              #input textarea{
                resize: none;
                height:100px;
              }

              #input div[contenteditable="true"]:focus:before{
                content: '';
              }

              #input div[contenteditable="true"]:before {
                  color:#999;
                  font-family:sans-serif;
                  content: attr(data-placeholder);
                  padding-right:20px;
              }

              #input div[contenteditable="true"] span{
                padding: 5px 20px;
                color: #ffffff;
                margin: 0;
                display: inline-block;
                border: 0.20px solid;
                background: #000;
                font-weight: 100;
                margin-bottom: 20px;
                font-size: 12px;
                /* font-family: roboto; */
                border-radius: 5px;
              }

              #input div[contenteditable="true"]{
                overflow-y:scroll !important;
                height:60px !important;
                padding-top: 10px !important;
              }

              #input div[contenteditable="true"]::-webkit-scrollbar {
                display: none;
              }

              #input input,#input textarea, #input div[contenteditable="true"]{
                width: 100%;
                background: #e6e6e6a8;
                margin-top: 5%;
              
                font-size: 15px;
                padding-left: 40px;
                text-align: left;
                color: #222;
                border: none;
                padding: 20px 20px;
                overflow: hidden;
                border-radius: 5px;
                -webkit-box-sizing: unset;
                -moz-box-sizing: unset;
                box-sizing: unset;
                box-sizing: border-box;
                outline: none;
                display: flex;
                flex-direction: row;
              
                align-items: center;
                flex-wrap: wrap;
              }

              

              #input input[type="radio"]{
                margin-top: 0;
                height: 40px;
                padding: 0;
                width: 40px;
                margin: 40px 20px;
              }

              #input input[type=file] {
                  visibility: hidden;
                  position: relative;
              }

              #input input[type=file]:before {
                  width: 100%;
                  background: #fff;
                  height: 5vh;
                  font-size: 40px;
                  text-align: center;
                  color: #222;
                  border: none;
                  padding: 40px 0;
                  border-radius: 10px;
                  visibility: visible;
                  position: absolute;
                  top: 0;
                  content: attr(data-placeholder);
                  cursor:pointer;
              }

              #button button:hover{
                transform: scale(0.9);

              }

              #button button{
                transition: All ease-in 0.25s;
                width: auto;
                background: #000000;
                padding: 15px 35px;
                /* margin-right: 20px; */
                color: #fff;
                cursor: pointer;
                float: left;
                border: none;
                display: flex;
                justify-content: center;
                margin: 0;
                align-items: center;
               
                border-radius: 200px;
              }

              #button button img{
                height: 25px;
    width: 25px;
    margin: 0;
    margin-right: 10px;
    padding: 0;
              }

              #headings{
                color: #222;
                position:relative;
                font-size: 23px;
                font-family: roboto,calibri;
              }

              pre{
                background: linear-gradient(45deg, #000000, #333332);
                padding: 20px;
                color: #fff;
                border-radius: 10px;
              }

              #headings #title{
                font-size:20px;
                color:#fff;
                text-align:center;
              }

              #headings #imgpadding{
                width50%;
                height:50%;
                padding:0 25%;
                border-radius:100vw;
              }

              #headings h1,#headings h2, #headings h3{
                width: 92%;
              }



              #button{
                margin-top: 60px;
                display: flex;
                grid-template-columns: repeat(auto-fit, minmax(40px, 1fr));
                border-radius: 10px;
                grid-gap: 20px;
                margin-bottom: 30px;
                box-sizing: border-box;
                /* justify-content: space-between; */
                justify-content: flex-end;
              }

              #button button:last-child{
                border:none;
              }

              ::-webkit-scrollbar {
                width: 12px;
              }
              
              ::-webkit-scrollbar-thumb {
                  -webkit-border-radius: 10px;
                  border-radius: 10px;
                  background: rgb(0, 0, 0);
                  -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5);
              }
                ::-webkit-scrollbar-track {
                  -webkit-border-radius: 10px;
                  border-radius: 10px;
                }
                #absoluteCloseButton {
                  position: absolute;
                  right: 0;
                  font-size: 35px;
                  font-family: roboto;
                  font-weight: 100;
                  color: #555;
                  background: transparent;
                  border: none;
                  outline:none;
                  top: 0;
                  cursor:pointer;
                  line-height: 0.7;
              }

              #promptContainer{
                border-radius: 5px;
                position:relative;
                z-index:10000000;
                padding: 2px 25px;
                background-color: #fff;
              }

       



              #closeOverlay{
                
                height: 100%;
                width: 100%;
                background: #000000c9;
                left: 0;
                backdrop-filter: blur(20px);
                position: fixed;
                top: 0;
              }
              
                @media (max-width:800px){
          

                  .promptUi{
                    padding: 5vw;
                    padding-bottom:0;
                  }


                  #button button{
                    width:100%;
                  }

                  #button{
                    flex-wrap: wrap;
                  }
                }


              }


            </style>

            <div class='promptUi'>

            <div class="killSwitch" id="closeOverlay" > </div>

              <div id="promptContainer">
              <div id='headings'>

                <button class="killSwitch" id="absoluteCloseButton" > × </button>
              </div>
              <div id='input'>
              </div>
              <div style="display:none" id='button'>
              </div>
              </div>
            </div>
            `;

        let template = document.createElement("template");
        template.innerHTML = html;
        template = template.content;
        this.shadowRoot.appendChild(template.cloneNode(true));
      }
    }

    if (!customElements.get("prompt-ui")) {
      window.customElements.define("prompt-ui", promptUI);
    }

    let overlayContainerElement = document.createElement("div");
    overlayContainerElement.setAttribute(
      "id",
      overlayContainerName.replace("#", "")
    );
    let newPromptTag = document.createElement("prompt-ui");
    overlayContainerElement.appendChild(newPromptTag);
    document.body.appendChild(overlayContainerElement);
    let shadowDom = document
      .querySelector(overlayContainerName)
      .querySelector("prompt-ui").shadowRoot;
    let promptContainer = shadowDom.querySelector(".promptUi");

    let primaryButon = null; //required fields are not validated if secondary buttons are clicked
    let requiredFields = [];

    for (let element of elements) {
      for (let tagName in element) {
        //there is only one tag name per element

        tagName = tagName.toLowerCase();

        let newTag = document.createElement(tagName);
        let configPerElement = element[tagName];

        /*
          In heading, key is element type
          in fields key is placeholder
          in buttons key is innerHTML
        */

        if (tagName === "button" && primaryButon === null) {
          //first button is taken as primary button
          primaryButon = configPerElement["innerHTML"];
        }

        if (typeof configPerElement === "object") {
          if (configPerElement.type)
            if (configPerElement.type === "radio") {
              newTag = document.createElement("div");

              if (!configPerElement.checked) {
                configPerElement.checked = "";
              } else {
                configPerElement.checked = "checked";
              }

              newTag.innerHTML = `<label class="container">${configPerElement.value}
              <input type="radio" value="${configPerElement.value}" ${configPerElement.checked} name="${configPerElement.name}">
              <span class="checkmark"></span>
             </label>`;
            }

          if (configPerElement.type)
            if (configPerElement.type === "date") {
              newTag = document.createElement("div");

              newTag.innerHTML = `
              <label data-type="date" for="birthday">${this.caps(
                configPerElement.name
              )}</label>
              <input type="date" name="${configPerElement.name}">
              `;
            }

          if (configPerElement.name)
            if (!configPerElement.placeholder)
              configPerElement.placeholder = configPerElement.name;

          for (let attribute in configPerElement) {
            let value = configPerElement[attribute];
            if (attribute === "required") {
              let name = configPerElement.name;
              if (!name) name = configPerElement.placeholder;
              if (!name) return this.say("name not given for required field");

              requiredFields.push(name);
            } else if (attribute === "type" && value === "array") {
              newTag.setAttribute("contenteditable", true);
              newTag.addEventListener("keyup", renderArray);

              newTag.addEventListener("focusout", (event) => {
                renderArray(event, true);
              });
              //setting default array values
              if (configPerElement.value) {
                let html = "";
                for (let index of configPerElement.value) {
                  html += "<span>" + index + "</span> "; //the last space is important
                }
                newTag.innerHTML = html;
              }
            } else if (attribute === "placeholder" || attribute === "name") {
              if (attribute === "placeholder") value = this.caps(value);
              newTag.setAttribute("data-" + attribute, value); //data-placeholder for divs
              newTag.setAttribute(attribute, value);
            } else if (attribute.indexOf("on") !== -1) {
              let eventType = attribute.replace("on", "");

              if (tagName === "button") {
                let intermediate = (event) => {
                  let newFn = value;
                  let fieldValues = GetAllFieldValues();
                  if (
                    requiredOmmited(fieldValues) === false &&
                    configPerElement["innerHTML"] === primaryButon
                  )
                    return this.say("required field is missing"); //a required value was ommited and a primary button was clicked
                  newFn(event, fieldValues);
                };

                newTag.addEventListener(eventType, intermediate);
              } else {
                let newFn = value;

                let intermediate = (event) => {
                  let fieldValue = GetAllFieldValues();
                  newFn(event, fieldValue);
                };

                if (attribute.toLowerCase() === "onenter") {
                  eventType = "keyup";

                  let oldIntermediate = intermediate;
                  intermediate = (event) => {
                    if (event.keyCode !== 13) return;
                    oldIntermediate(event);
                  };
                }

                newTag.addEventListener(eventType, intermediate);
              }
            } else {
              setAttribute(attribute, value);
            }
          }
        } else {
          let defaultAttribute = "innerHTML";
          setAttribute(defaultAttribute, configPerElement);
        }

        function setAttribute(attribute, value) {
          //console.log(attribute, value);

          if (attribute === "innerHTML") return (newTag.innerHTML = value);
          newTag.setAttribute(attribute, value);
        }

        let containerName = tagName;
        if (tagName === "h1" || tagName === "h2" || tagName === "h3") {
          containerName = "headings";
        } else if (tagName === "button") {
          containerName = "button";
        } else {
          //for element divs and input, code is written in this way to be most understandable
          containerName = "input";
        }

        containerName = "#" + containerName;

        if (containerName === "#button")
          promptContainer.querySelector(containerName).style.display = "flex";

        promptContainer.querySelector(containerName).appendChild(newTag);
      }
    }

    function renderArray(event, finish) {
      if (!finish) finish = false;

      if (event.keyCode !== 32 && finish === false) return;

      let array = getArray(event.target.innerHTML);

      if (!array) return;

      event.target.innerHTML = "";

      for (let x of array) {
        event.target.innerHTML += `<span>${x}</span> `;
      }

      if (!finish) {
        event.target.innerHTML += `<span>&nbsp</span> `;

        var range = document.createRange();
        var sel = window.getSelection();
        range.setStart(
          event.target.childNodes[event.target.childNodes.length - 1],
          0
        );
        range.collapse(true);
        sel.removeAllRanges();
        sel.addRange(range);
        event.target.focus();
      }
    }

    function requiredOmmited(cred) {
      for (let index of requiredFields) {
        if (!cred[index]) return false;
      }

      return true;
    }

    function getArray(html) {
      let interest = [];

      let splits = html
        .replace(/<\/span>/gi, "")
        .replace(/<span>/gi, "")
        .split(" ");

      if (splits.length <= 0) return null;

      for (let oneInterest of splits) {
        // a = a.replace(/&nbsp;/g,'').trim()
        if (!oneInterest) continue;
        console.log(oneInterest);
        let value = oneInterest.replace(/&nbsp;/gi, "");
        if (value) interest.push(value);
      }

      console.log(html, splits, splits.length, interest);

      return interest;
    }

    function GetAllFieldValues() {
      let Obj = {};
      for (let index of promptContainer.querySelectorAll(
        '#input input,#input textarea, #input div[contenteditable="true"]'
      )) {
        if (index.getAttribute("type") === "file") {
          Obj[index.getAttribute("data-name")] = index;
        } else if (index.getAttribute("contenteditable")) {
          let arrayValues = getArray(index.innerHTML);
          Obj[index.getAttribute("data-name")] = arrayValues;
          continue;
        } else if (index.getAttribute("type") === "radio") {
          Obj[index.value] = index.checked;
        } else {
          let name = index.getAttribute("data-name");
          if (!name) name = index.getAttribute("name");
          Obj[name] = index.value;
        }
      }

      return Obj;
    }

    this.currentPrompt[type] = {
      kill: () => {
        this.removeDom(newPromptTag);
      },
      dom: shadowDom,
    };

    let killSwitches = promptContainer.querySelectorAll(".killSwitch");
    killSwitches.forEach((killSwitch) => {
      killSwitch.addEventListener("click", this.currentPrompt[type].kill);
    });

    return this.currentPrompt[type];
  };
  getUserCookie(type) {
    if (!type) type = "user";
    if (localStorage.getItem(type + "-cookie-localstorage")) {
      return localStorage.getItem(type + "-cookie-localstorage");
    } else if (U.getCookie(type + "-cookie")) {
      return U.getCookie(type + "-cookie");
    }

    return false;
  }
  caps(s) {
    if (typeof s !== "string") return "";
    return s.charAt(0).toUpperCase() + s.slice(1);
  }
  urlParam(property) {
    let urlParam = window.location.search
      .replace("?", "")
      .split("&")
      .map((item) => {
        let part = item.split("=");
        let val = {};
        val[part[0]] = part[1];
        return val;
      });

    let paramObject = {};
    for (let index of urlParam) {
      paramObject = Object.assign(paramObject, index);
    }
    return paramObject[property];
  }
  utilityFunctions = () => {
    let U = this;
    return new (class {
      upload(file, bucketName, originalFileName, attribute) {
        return new Promise((resolve) => {
          let form = new FormData();

          form.append(
            "developerCookie",
            localStorage.getItem("developer-cookie-localstorage")
          );
          if (originalFileName)
            form.append("originalFileName", originalFileName); //for replacing
          form.append("bucket", bucketName);
          if (U.getUserCookie()) form.append("cookie", U.getUserCookie());
          if (!attribute) attribute = {};
          for (let key in attribute) {
            form.append(key, attribute[key]);
          }
          //if originalFileName is undefined it is automatically assigned if file has name
          //we need originalFileName for finding extension
          //originalFileName serves two pourpose, tell us the file name that needs to be replaced
          //if file doesn't needs to be replaced originalFileName gives us the extension for generating new name
          //on the server side the originalFileName in the form data is for declaring the file which needs to be replaced
          // on the server side the file.filename is for finding extension
          //file.filename is set automatically by the browser if we don't overwrite them
          //but when we create blob (in case of hosting upload) it does not happens automatically

          //if originalFileName is undefined it is automatically extracted from file.filename by multer
          if (file.name) originalFileName = file.name;

          form.append("file", file, originalFileName); //if it was appended before the other appends then req.body will not be processed instantly

          let endPoint = "/upload";
          if (bucketName === "profilePicture")
            endPoint = "/uploadProfilePicture";
          fetch(U.info.serverUrl + endPoint, {
            method: "POST",
            body: form,
          }).then((response) =>
            response.json().then((postData) => {
              if (postData.error) {
                throw Error("upload Error " + postData.error);
              }

              resolve(postData);
            })
          );
        });
      }
    })();
  };
  upload = async (file, bucket, originalFileName) => {
    let url = await this.utility.upload(file, bucket, originalFileName);
    if (url.error) return this.say(url.error);
    return url;
  };
}

let U = new uponJS();
global.U = U;
global.uponJS = uponJS;
export default U;
